{"version":3,"sources":["Components/Navbar.js","Components/Search.js","Components/Display.js","Components/Pages/Home.js","Components/Pages/About.js","Components/Pages/Error.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","to","Search","state","city","submitForm","e","preventDefault","props","getCity","setState","updateField","target","name","value","onSubmit","this","required","onChange","type","placeholder","Component","Display","myStyle","backgroundImage","icon","height","width","textAlign","margin","borderRadius","coun","style","desc","temp","hum","pres","Home","cityName","loading","res","Axios","get","then","resp","data","console","log","country","sys","temperature","Math","floor","main","pressure","humidity","description","weather","timezone","gotData","catch","error","window","location","time","About","Error","App","exact","path","component","ErrPage","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f59b1a60.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nexport default function Navbar() {\r\n   \r\n    return (\r\n        <div className=\"navbar-container\">\r\n            <div className=\"app-title\">\r\n            <h1><a href=\"/weather-react-app\">Vaanilai Arikkai</a></h1>\r\n            <p>Project by Vignesh Narendran</p>\r\n            </div>\r\n            <div className=\"links\">\r\n            <Link className=\"link\" to=\"/weather-react-app\">Home</Link>\r\n            <Link className=\"link\" to=\"/about\">About</Link>\r\n            </div>\r\n         \r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport class Search extends Component {\r\n  state = {\r\n    city: \"\"\r\n  };\r\n  submitForm = e => {\r\n    e.preventDefault();\r\n    this.props.getCity(this.state.city);\r\n    this.setState({ city: \"\" });\r\n  };\r\n  updateField = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"main-search\">\r\n        <div className=\"search-component center-things\">\r\n          <form onSubmit={this.submitForm}>\r\n            <input\r\n              required\r\n              onChange={this.updateField}\r\n              type=\"text\"\r\n              name=\"city\"\r\n              placeholder=\"Where do you live?\"\r\n              className=\"search-bar\"\r\n            />\r\n            <input className=\"search-btn\" type=\"submit\" value=\"Find weather\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, {Fragment} from \"react\";\r\nfunction Display(props) {\r\n  const myStyle = {\r\n    backgroundImage: `url(http://openweathermap.org/img/wn/${props.icon}@2x.png)`,\r\n    height: \"100px\",\r\n    width: \"100px\",\r\n    textAlign: \"center\",\r\n    margin: \"0 auto\",\r\n    borderRadius: \"50%\"\r\n  };\r\n  return (\r\n    <Fragment>  \r\n      <div> \r\n      <a className=\"go-back-btn item1\" href=\"/weather-react-app\">Go back</a>\r\n      </div>\r\n      <div className=\"display-grid-wrapper\">\r\n      \r\n      <p className=\"city-val item2\">\r\n        {props.city}, {props.coun}\r\n        <div className=\"img-val item3\" style={myStyle}></div>\r\n      </p>\r\n      <p className=\"desc-val item4\">{props.desc}</p>\r\n      <h1 className=\"temp-val item5\">{props.temp}&deg;C</h1>\r\n      <p className=\"hum-val item6\">Humidity: {props.hum}%</p>\r\n      <p className=\"pres-val item7\">Pressure: {props.pres} mbar</p>\r\n      <a className=\"go-back-btn item-mob\" href=\"/weather-react-app\">Go back</a>\r\n    </div>\r\n    </Fragment>\r\n \r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React, { Component } from \"react\";\r\nimport Search from \"../Search\";\r\nimport Display from \"../Display\";\r\nimport PropTypes from \"prop-types\";\r\nimport Axios from \"axios\";\r\n\r\nexport class Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      city: \"\",\r\n      temperature: \"\",\r\n      pressure: \"\",\r\n      humidity: \"\",\r\n      description: \"\",\r\n      icon: \"\",\r\n      country: \"\",\r\n      timezone:\"\",\r\n      loading: false,\r\n      gotData: false\r\n    };\r\n  }\r\n  static propTypes = {\r\n    getCity: PropTypes.func\r\n  };\r\n  getCity = cityName => {\r\n    this.setState({ loading: true });\r\n    let res = {};\r\n    Axios.get(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=8823c10c1ce04cfe68737c57d3bb3fb8`\r\n    )\r\n      .then(resp => {\r\n        res = resp.data;\r\n        console.log(res);\r\n        this.setState({\r\n          city: res.name,\r\n          country: res.sys.country,\r\n          temperature: Math.floor(res.main.temp - 273),\r\n          pressure: res.main.pressure,\r\n          humidity: res.main.humidity,\r\n          description: res.weather[0].description,\r\n          icon: res.weather[0].icon,\r\n          timezone: res.timezone,\r\n          gotData: true\r\n        });\r\n      })\r\n      .catch(error => {\r\n        window.location.href = \"/error\";\r\n      });\r\n    this.setState({ loading: false });\r\n  };\r\n  render() {\r\n    const {\r\n      city,\r\n      country,\r\n      temperature,\r\n      pressure,\r\n      humidity,\r\n      description,\r\n      icon,\r\n      gotData,\r\n      timezone\r\n    } = this.state;\r\n        if(gotData){\r\n        return(\r\n          <div>\r\n        <Display\r\n          city={city}\r\n          coun={country}\r\n          temp={temperature}\r\n          pres={pressure}\r\n          hum={humidity}\r\n          desc={description}\r\n          icon={icon}\r\n          time={timezone}\r\n        />\r\n      </div>\r\n    );\r\n        }\r\n        return (\r\n          <div>\r\n            <Search getCity={this.getCity} />\r\n            </div>\r\n            );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    const aboutStyle = {\r\n        textAlign:'center'\r\n    }\r\n    return (\r\n        <div className=\"about-container\">\r\n        <div style={aboutStyle} className=\"center-things\">\r\n            <p>Vaanilai Arikkai is a weather forecasting web app made using React JS.</p>\r\n            <p>The app uses openweathermap API to fetch weather data for a requested city.</p>\r\n            <p>The source code for this app is available in this GitHub repository.</p>\r\n        </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Error() {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h2>Oops! Never heard of that city.</h2>\r\n        <h3>Please try searching again.</h3>\r\n        <a className=\"go-back-btn\" href=\"/weather-react-app\">Go back</a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./Components/Navbar\";\nimport Home from \"./Components/Pages/Home\";\nimport About from \"./Components/Pages/About\";\nimport ErrPage from './Components/Pages/Error';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n      <div className=\"dark-theme center-things\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/weather-react-app\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/error\" component={ErrPage}/>\n        </Switch>\n      </div>\n    </Router>\n    )\n  }\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}